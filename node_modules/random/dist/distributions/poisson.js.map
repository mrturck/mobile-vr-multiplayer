{"version":3,"sources":["../../src/distributions/poisson.js"],"names":["logFactorialTable","logFactorial","k","logSqrt2PI","random","lambda","ow","number","positive","expMean","Math","exp","p","x","u","next","smu","sqrt","b","a","invAlpha","vR","v","floor","abs","us","t","log"],"mappings":"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","file":"poisson.js","sourcesContent":["import ow from 'ow-lite'\n\nconst logFactorialTable = [\n  0.0,\n  0.0,\n  0.69314718055994529,\n  1.7917594692280550,\n  3.1780538303479458,\n  4.7874917427820458,\n  6.5792512120101012,\n  8.5251613610654147,\n  10.604602902745251,\n  12.801827480081469\n]\n\nconst logFactorial = (k) => {\n  return logFactorialTable[k]\n}\n\nconst logSqrt2PI = 0.91893853320467267\n\nexport default (random, lambda = 1) => {\n  ow(lambda, ow.number.positive)\n\n  if (lambda < 10) {\n    // inversion method\n    const expMean = Math.exp(-lambda)\n\n    return () => {\n      let p = expMean\n      let x = 0\n      let u = random.next()\n\n      while (u > p) {\n        u = u - p\n        p = lambda * p / ++x\n      }\n\n      return x\n    }\n  } else {\n    // generative method\n    const smu = Math.sqrt(lambda)\n    const b = 0.931 + 2.53 * smu\n    const a = -0.059 + 0.02483 * b\n    const invAlpha = 1.1239 + 1.1328 / (b - 3.4)\n    const vR = 0.9277 - 3.6224 / (b - 2)\n\n    return () => {\n      while (true) {\n        let u\n        let v = random.next()\n\n        if (v <= 0.86 * vR) {\n          u = v / vR - 0.43\n          return Math.floor((2 * a / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445)\n        }\n\n        if (v >= vR) {\n          u = random.next() - 0.5\n        } else {\n          u = v / vR - 0.93\n          u = ((u < 0) ? -0.5 : 0.5) - u\n          v = random.next() * vR\n        }\n\n        const us = 0.5 - Math.abs(u)\n        if (us < 0.013 && v > us) {\n          continue\n        }\n\n        const k = Math.floor((2 * a / us + b) * u + lambda + 0.445) | 0\n        v = v * invAlpha / (a / (us * us) + b)\n\n        if (k >= 10) {\n          const t = (k + 0.5) * Math.log(lambda / k) - lambda - logSqrt2PI +\n            k - (1 / 12.0 - (1 / 360.0 - 1 / (1260.0 * k * k)) / (k * k)) / k\n\n          if (Math.log(v * smu) <= t) {\n            return k\n          }\n        } else if (k >= 0) {\n          if (Math.log(v) <= k * Math.log(lambda) - lambda - logFactorial(k)) {\n            return k\n          }\n        }\n      }\n    }\n  }\n}\n"]}