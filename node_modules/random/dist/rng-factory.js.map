{"version":3,"sources":["../src/rng-factory.js"],"names":["args","arg0","rest","RNG","RNGFunction","seedrandom","Error"],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;AAEA;;;;;;;;kBAEe,YAAa;AAAA,oCAATA,IAAS;AAATA,QAAS;AAAA;;AAAA,eACYA,IADZ;AAAA,MAClBC,IADkB,0BACX,SADW;AAAA,MACGC,IADH,GACYF,IADZ;;;AAG1B,iBAAeC,IAAf,yCAAeA,IAAf;AACE,SAAK,QAAL;AACE,UAAIA,gBAAgBE,aAApB,EAAyB;AACvB,eAAOF,IAAP;AACD;AACD;;AAEF,SAAK,UAAL;AACE,aAAO,IAAIG,kBAAJ,CAAgBH,IAAhB,CAAP;;AAEF,SAAK,QAAL;AACA,SAAK,QAAL;AACE,aAAO,IAAIG,kBAAJ,CAAgBC,yDAAcH,IAAd,EAAhB,CAAP;AAZJ;;AAeA,QAAM,IAAII,KAAJ,mBAA0BL,IAA1B,OAAN;AACD,C","file":"rng-factory.js","sourcesContent":["import seedrandom from 'seedrandom'\n\nimport RNG from './rng'\n\nimport RNGFunction from './generators/function'\n\nexport default (...args) => {\n  const [ arg0 = 'default', ...rest ] = args\n\n  switch (typeof arg0) {\n    case 'object':\n      if (arg0 instanceof RNG) {\n        return arg0\n      }\n      break\n\n    case 'function':\n      return new RNGFunction(arg0)\n\n    case 'string':\n    case 'number':\n      return new RNGFunction(seedrandom(...rest))\n  }\n\n  throw new Error(`invalid RNG \"${arg0}\"`)\n}\n"]}