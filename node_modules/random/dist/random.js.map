{"version":3,"sources":["../src/random.js"],"names":["RNG","RNGFactory","Random","rng","ow","object","instanceOf","_cache","use","length","clone","_rng","_patch","Error","Math","random","uniform","next","min","max","uniformInt","uniformBoolean","_memoize","mu","sigma","p","n","lambda","alpha","label","getter","args","key","join","value","undefined","distribution"],"mappings":"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","file":"random.js","sourcesContent":["import ow from 'ow-lite'\n\nimport RNG from './rng'\nimport RNGFactory from './rng-factory'\n\nimport uniform from './distributions/uniform'\nimport uniformInt from './distributions/uniform-int'\nimport uniformBoolean from './distributions/uniform-boolean'\n\nimport normal from './distributions/normal'\nimport logNormal from './distributions/log-normal'\n\nimport bernoulli from './distributions/bernoulli'\nimport binomial from './distributions/binomial'\nimport geometric from './distributions/geometric'\n\nimport poisson from './distributions/poisson'\nimport exponential from './distributions/exponential'\n\nimport irwinHall from './distributions/irwin-hall'\nimport bates from './distributions/bates'\nimport pareto from './distributions/pareto'\n\nexport { RNG, RNGFactory }\n\n/**\n * Seedable random number generator supporting many common distributions.\n *\n * Defaults to Math.random as its underlying pseudorandom number generator.\n *\n * @name Random\n * @class\n *\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\n */\nclass Random {\n  constructor (rng) {\n    if (rng) ow(rng, ow.object.instanceOf(RNG))\n\n    this._cache = { }\n    this.use(rng)\n  }\n\n  /**\n   * @member {RNG} Underlying pseudo-random number generator\n   */\n  get rng () {\n    return this._rng\n  }\n\n  /**\n   * Creates a new `Random` instance, optionally specifying parameters to\n   * set a new seed.\n   *\n   * @see RNG.clone\n   *\n   * @param {string} [seed] - Optional seed for new RNG.\n   * @param {object} [opts] - Optional config for new RNG options.\n   * @return {Random}\n   */\n  clone (...args) {\n    if (args.length) {\n      return new Random(RNGFactory(...args))\n    } else {\n      return new Random(this.rng.clone())\n    }\n  }\n\n  /**\n   * Sets the underlying pseudorandom number generator used via\n   * either an instance of `seedrandom`, a custom instance of RNG\n   * (for PRNG plugins), or a string specifying the PRNG to use\n   * along with an optional `seed` and `opts` to initialize the\n   * RNG.\n   *\n   * @example\n   * const random = require('random')\n   *\n   * random.use('example_seedrandom_string')\n   * // or\n   * random.use(seedrandom('kittens'))\n   * // or\n   * random.use(Math.random)\n   *\n   * @param {...*} args\n   */\n  use (...args) {\n    this._rng = RNGFactory(...args)\n  }\n\n  /**\n   * Patches `Math.random` with this Random instance's PRNG.\n   */\n  patch () {\n    if (this._patch) {\n      throw new Error('Math.random already patched')\n    }\n\n    this._patch = Math.random\n    Math.random = this.uniform()\n  }\n\n  /**\n   * Restores a previously patched `Math.random` to its original value.\n   */\n  unpatch () {\n    if (this._patch) {\n      Math.random = this._patch\n      delete this._patch\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  // Uniform utility functions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Convenience wrapper around `this.rng.next()`\n   *\n   * Returns a floating point number in [0, 1).\n   *\n   * @return {number}\n   */\n  next () {\n    return this._rng.next()\n  }\n\n  /**\n   * Samples a uniform random floating point number, optionally specifying\n   * lower and upper bounds.\n   *\n   * Convence wrapper around `random.uniform()`\n   *\n   * @param {number} [min=0] - Lower bound (float, inclusive)\n   * @param {number} [max=1] - Upper bound (float, exclusive)\n   * @return {number}\n   */\n  float (min, max) {\n    return this.uniform(min, max)()\n  }\n\n  /**\n   * Samples a uniform random integer, optionally specifying lower and upper\n   * bounds.\n   *\n   * Convence wrapper around `random.uniformInt()`\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {number}\n   */\n  int (min, max) {\n    return this.uniformInt(min, max)()\n  }\n\n  /**\n   * Samples a uniform random integer, optionally specifying lower and upper\n   * bounds.\n   *\n   * Convence wrapper around `random.uniformInt()`\n   *\n   * @alias `random.int`\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {number}\n   */\n  integer (min, max) {\n    return this.uniformInt(min, max)()\n  }\n\n  /**\n   * Samples a uniform random boolean value.\n   *\n   * Convence wrapper around `random.uniformBoolean()`\n   *\n   * @alias `random.boolean`\n   *\n   * @return {boolean}\n   */\n  bool () {\n    return this.uniformBoolean()()\n  }\n\n  /**\n   * Samples a uniform random boolean value.\n   *\n   * Convence wrapper around `random.uniformBoolean()`\n   *\n   * @return {boolean}\n   */\n  boolean () {\n    return this.uniformBoolean()()\n  }\n\n  // --------------------------------------------------------------------------\n  // Uniform distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\n   *\n   * @param {number} [min=0] - Lower bound (float, inclusive)\n   * @param {number} [max=1] - Upper bound (float, exclusive)\n   * @return {function}\n   */\n  uniform (min, max) {\n    return this._memoize('uniform', uniform, min, max)\n  }\n\n  /**\n   * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution).\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {function}\n   */\n  uniformInt (min, max) {\n    return this._memoize('uniformInt', uniformInt, min, max)\n  }\n\n  /**\n   * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution),\n   * with two possible outcomes, `true` or `false.\n   *\n   * This method is analogous to flipping a coin.\n   *\n   * @return {function}\n   */\n  uniformBoolean () {\n    return this._memoize('uniformBoolean', uniformBoolean)\n  }\n\n  // --------------------------------------------------------------------------\n  // Normal distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).\n   *\n   * @param {number} [mu=0] - Mean\n   * @param {number} [sigma=1] - Standard deviation\n   * @return {function}\n   */\n  normal (mu, sigma) {\n    return normal(this, mu, sigma)\n  }\n\n  /**\n   * Generates a [Log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution).\n   *\n   * @param {number} [mu=0] - Mean of underlying normal distribution\n   * @param {number} [sigma=1] - Standard deviation of underlying normal distribution\n   * @return {function}\n   */\n  logNormal (mu, sigma) {\n    return logNormal(this, mu, sigma)\n  }\n\n  // --------------------------------------------------------------------------\n  // Bernoulli distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution).\n   *\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  bernoulli (p) {\n    return bernoulli(this, p)\n  }\n\n  /**\n   * Generates a [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution).\n   *\n   * @param {number} [n=1] - Number of trials.\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  binomial (n, p) {\n    return binomial(this, n, p)\n  }\n\n  /**\n   * Generates a [Geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution).\n   *\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  geometric (p) {\n    return geometric(this, p)\n  }\n\n  // --------------------------------------------------------------------------\n  // Poisson distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution).\n   *\n   * @param {number} [lambda=1] - Mean (lambda > 0)\n   * @return {function}\n   */\n  poisson (lambda) {\n    return poisson(this, lambda)\n  }\n\n  /**\n   * Generates an [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution).\n   *\n   * @param {number} [lambda=1] - Inverse mean (lambda > 0)\n   * @return {function}\n   */\n  exponential (lambda) {\n    return exponential(this, lambda)\n  }\n\n  // --------------------------------------------------------------------------\n  // Misc distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates an [Irwin Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution).\n   *\n   * @param {number} [n=1] - Number of uniform samples to sum (n >= 0)\n   * @return {function}\n   */\n  irwinHall (n) {\n    return irwinHall(this, n)\n  }\n\n  /**\n   * Generates a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution).\n   *\n   * @param {number} [n=1] - Number of uniform samples to average (n >= 1)\n   * @return {function}\n   */\n  bates (n) {\n    return bates(this, n)\n  }\n\n  /**\n   * Generates a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution).\n   *\n   * @param {number} [alpha=1] - Alpha\n   * @return {function}\n   */\n  pareto (alpha) {\n    return pareto(this, alpha)\n  }\n\n  // --------------------------------------------------------------------------\n  // Internal\n  // --------------------------------------------------------------------------\n\n  /**\n   * Memoizes distributions to ensure they're only created when necessary.\n   *\n   * Returns a thunk which that returns independent, identically distributed\n   * samples from the specified distribution.\n   *\n   * @private\n   *\n   * @param {string} label - Name of distribution\n   * @param {function} getter - Function which generates a new distribution\n   * @param {...*} args - Distribution-specific arguments\n   *\n   * @return {function}\n   */\n  _memoize (label, getter, ...args) {\n    const key = `${args.join(';')}`\n    let value = this._cache[label]\n\n    if (value === undefined || value.key !== key) {\n      value = { key, distribution: getter(this, ...args) }\n      this._cache[label] = value\n    }\n\n    return value.distribution\n  }\n}\n\n// defaults to Math.random as its RNG\nexport default new Random()\n"]}