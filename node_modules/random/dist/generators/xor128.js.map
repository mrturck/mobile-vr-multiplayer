{"version":3,"sources":["../../src/generators/xor128.js"],"names":["RNGXOR128","seed","opts","x","y","z","w","t","_seed","i","next","RNG"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEqBA,S;;;AACnB,qBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AAAA;;AAGvB,UAAKC,CAAL,GAAS,CAAT;AACA,UAAKC,CAAL,GAAS,CAAT;AACA,UAAKC,CAAL,GAAS,CAAT;AACA,UAAKC,CAAL,GAAS,CAAT;;AAEA,UAAKL,IAAL,CAAUA,IAAV,EAAgBC,IAAhB;AARuB;AASxB;;;;2BAMO;AACN,UAAMK,IAAI,KAAKJ,CAAL,GAAU,KAAKA,CAAL,IAAU,CAA9B;AACA,WAAKA,CAAL,GAAS,KAAKC,CAAd;AACA,WAAKA,CAAL,GAAS,KAAKC,CAAd;AACA,WAAKA,CAAL,GAAS,KAAKC,CAAd;AACA,WAAKA,CAAL,GAAS,KAAKA,CAAL,IAAW,KAAKA,CAAL,KAAW,EAAZ,GAAkBC,CAAlB,GAAuBA,MAAM,CAAvC,CAAT;AACA,aAAO,CAAC,KAAKD,CAAL,KAAW,CAAZ,IAAiB,WAAxB;AACD;;;yBAEKL,K,EAAMC,I,EAAM;AAChB;;AAEA,WAAKC,CAAL,GAAS,KAAKK,KAAL,CAAWP,KAAX,EAAiBC,IAAjB,CAAT;;AAEA;AACA,WAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwB,EAAEA,CAA1B,EAA6B;AAC3B,aAAKC,IAAL;AACD;AACF;;;0BAEMT,I,EAAMC,I,EAAM;AACjB,aAAO,IAAIF,SAAJ,CAAcC,IAAd,EAAoBC,IAApB,CAAP;AACD;;;wBA1BW;AACV,aAAO,QAAP;AACD;;;;EAdoCS,a;;kBAAlBX,S","file":"xor128.js","sourcesContent":["import RNG from '../rng'\n\nexport default class RNGXOR128 extends RNG {\n  constructor (seed, opts) {\n    super()\n\n    this.x = 0\n    this.y = 0\n    this.z = 0\n    this.w = 0\n\n    this.seed(seed, opts)\n  }\n\n  get name () {\n    return 'xor128'\n  }\n\n  next () {\n    const t = this.x ^ (this.x << 1)\n    this.x = this.y\n    this.y = this.z\n    this.z = this.w\n    this.w = this.w ^ ((this.w >>> 19) ^ t ^ (t >>> 8))\n    return (this.w >>> 0) / 0x100000000\n  }\n\n  seed (seed, opts) {\n    // this._rng = seedrandom(this._seed(seed, opts))\n\n    this.x = this._seed(seed, opts)\n\n    // discard an initial batch of 64 values\n    for (let i = 0; i < 64; ++i) {\n      this.next()\n    }\n  }\n\n  clone (seed, opts) {\n    return new RNGXOR128(seed, opts)\n  }\n}\n"]}